import os
from collections import defaultdict
import sys
import yaml
sys.path.append(os.getcwd())
import helperFun

configfile: "config.yaml"
cluster_config = yaml.load(open(config["cluster_config"]))

# rename variables from config file for downstream simplicity
ref = config["ref"]
fastq_suffix1 = config["fastq_suffix1"]
fastq_suffix2 = config["fastq_suffix2"]
fastqDir = config["fastqDir"]

# this is where Snakemake output will go, specify with baseDir in config.yml
bamDir = config["bamDir"]
intervalDir = config["fbDir"] + config["intervalDir"]  
vcfDir_fb = config["fbDir"] + config["vcfDir_fb"]
listDir = config["listDir"]
# for creating intervals
maxIntervalLen = int(config["maxIntervalLen"])
maxBpPerList = int(config["maxBpPerList"])
maxIntervalsPerList = int(config["maxIntervalsPerList"])
minNmer = config["minNmer"]

refBaseName = helperFun.getRefBaseName(config["ref"])

# grab all samples for R1 to get list of names, no need to look at R2 which should have identical names
#SAMPLES = ["ERR1013163"]
SAMPLES = helperFun.getSampleNames(fastqDir, fastq_suffix1)


if not os.path.isdir(listDir):
    os.system("mkdir " + listDir)
LISTS = helperFun.createListsGetIndices(listDir, maxIntervalLen, maxBpPerList, maxIntervalsPerList, minNmer, ref, refBaseName)
intervals_fb = helperFun.loadIntervalsForFB("intervals.bed")


def myfunc(vcfDir_fb, intervals_fb):
    gatherCommand = ""
    for j in intervals_fb:
        gatherCommand = gatherCommand + f"-I {vcfDir_fb}{j}.vcf "
    return(gatherCommand)

### workflow ###

rule all:
    input:
        missing = config["fbDir"] + "missing_data_per_ind.txt",
        SNPsPerInt = config["fbDir"] + "SNP_per_interval.txt"

rule intervals:
    """
    Because snakemake input MUST be a file, this hack is necessary to iterate through intervals in the next step,
    inputing one interval in the command at a time. This information is stored in intervals_fb
    """
    output:
        interval = temp(touch(intervalDir + "{i}"))

rule bam2vcf:
    """
    Call freebayes.
    """
    input:
        ref = config['ref'],
        bams = expand(bamDir + "{sample}_dedup.bam", sample=SAMPLES) # input all bams at once
    output: 
        vcf = temp(vcfDir_fb + "{i}.vcf") # output one vcf per interval
    conda:
        "envs/bam2vcf.yml"
    shell:
        "freebayes -f {input.ref} "
        "-r {wildcards.i} "
        "{input.bams} "
        "> {output.vcf}\n"


rule gatherVcfs:
    """
    This rule gathers all of the VCFs, one per interval, into one final VCF
    """
    input:
        intervals = expand(intervalDir + "{i}", i=intervals_fb),
        vcfs = expand(vcfDir_fb + "{i}.vcf", i=intervals_fb),
        ref = config['ref']
    output: 
        vcf = temp(config["fbDir"] + "Combined.vcf"),
        vcfFiltered = config["fbDir"] + "Combined_hardFiltered.vcf"
    params:
        gatherCommand = myfunc(vcfDir_fb, intervals_fb)
    conda:
        "envs/bam2vcf.yml"
    shell:
        "gatk GatherVcfs "
        "{params.gatherCommand} "
        "-O {output.vcf}\n"

        "sleep 10\n" # the variant filtration step was failing in an unreproducible way, so added this in case
        # Hard filter Combined.vcf
        "gatk VariantFiltration "
        "-R {input.ref} "
        "-V {output.vcf} "
        "--output {output.vcfFiltered} "
        "--filter-expression \"QD < 2.0 || FS > 60.0 || SOR > 3.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0 || ExcessHet > 30.0\" "
        "--filter-name \"filteredOut\" "

rule vcftools:
    input:
        vcf = config["fbDir"] + "Combined_hardFiltered.vcf",
        int = "intervals.bed"
    output: 
        missing = config["fbDir"] + "missing_data_per_ind.txt",
        SNPsPerInt = config["fbDir"] + "SNP_per_interval.txt"
    conda:
        "envs/bam2vcf.yml"
    shell:
        "vcftools --vcf {input.vcf} --remove-filtered-all --minDP 1 --stdout --missing-indv > {output.missing}\n"
        "bedtools intersect -a {input.int} -b {input.vcf} -c > {output.SNPsPerInt}"
