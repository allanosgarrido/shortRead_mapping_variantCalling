import os
from collections import defaultdict
import sys
import yaml
sys.path.append(os.getcwd())
import helperFun

configfile: "config.yaml"
cluster_config = yaml.load(open(config["cluster_config"]))

# rename variables from config file for downstream simplicity
ref = config["ref"]
fastq_suffix1 = config["fastq_suffix1"]
fastq_suffix2 = config["fastq_suffix2"]
fastqDir = config["fastqDir"]

# this is where Snakemake output will go, specify with baseDir in config.yml
bamDir = config["baseDir"] + config["bamDir"]
gvcfDir = config["baseDir"] + config["gvcfDir"]
vcfDir_fb = config["baseDir"] + config["vcfDir_fb"]
listDir = config["listDir"]
maxIntervalLen = int(config["maxIntervalLen"])
maxBpPerList = int(config["maxBpPerList"])
maxIntervalsPerList = int(config["maxIntervalsPerList"])
minNmer = config["minNmer"]

refBaseName = helperFun.getRefBaseName(config["ref"])

# grab all samples for R1 to get list of names, no need to look at R2 which should have identical names
#SAMPLES = ["ERR1013163"]
SAMPLES = helperFun.getSampleNames(fastqDir, fastq_suffix1)


if not os.path.isdir(listDir):
    os.system("mkdir " + listDir)
LISTS = helperFun.createListsGetIndices(listDir, maxIntervalLen, maxBpPerList, maxIntervalsPerList, minNmer, ref, refBaseName)
intervals_fb = helperFun.loadIntervalsForFB("intervals.bed")


### workflow ###

rule all:
    input:
        intervals = expand("intervals/{i}", i=intervals_fb),
        vcfs = expand(vcfDir_fb + "{i}.vcf", i=intervals_fb)
        #missing = "missing_data_per_ind.txt",
        #SNPsPerInt = "SNP_per_interval.txt"

rule intervals:
    """
    Because snakemake input MUST be a file, this hack is necessary to iterate through intervals in the next step,
    inputing one interval in the command at a time. This information is stored in intervals_fb
    """
    output:
        interval = temp(touch("intervals/{i}"))

rule bam2vcf:
    """
    Call freebayes.
    """
    input:
        ref = config['ref'],
        bams = expand(bamDir + "{sample}_dedup.bam", sample=SAMPLES) # input all bams at once
    output: 
        vcf = vcfDir_fb + "{i}.vcf" # output one vcf per interval
    conda:
        "envs/bam2vcf.yml"
    shell:
        "freebayes -f {input.ref} "
        "-r {wildcards.i} "
        "{input.bams} "
        "> {output.vcf}\n"


